
local energy_point_x_pos = 450;   
local energy_point_width = 8;
local energy_bars_last_x = 0;
local createdNodesList = {}
local disableEnergy = false;

local lvl1_kill_count = 10;

function init(self)

  self.energy = 10 
  self.score = 0
  self.energypackvalue = 5
  self.maxenergy = 50
  self.isGameOverPlayed = 0;
  self.isMaxEnergyPlayed =0;

 
 local id = timer.seconds(5, 
 	function(self, id)
 		local node = gui.get_node("intro");
 		gui.delete_node(node)
	end
	);
	
--Display starting energy stack
energy_bars_last_x = add_energy_bars(self.energy,energy_point_x_pos);
 
end


function update(self, dt)
    -- Spamming hero object for energy data refresh if game over is not played.
    if (self.isGameOverPlayed == 0) then
        msg.post("/level/hero#script", "energy_data", { self.energy })
    end
    
    --Check energy enable or disable status and run a timer to expire the energy
    if(disableEnergy == true and self.isMaxEnergyPlayed == 0 ) then
    	self.isMaxEnergyPlayed = 1
    	
    	 msg.post("/level/controller#sound", "stop_sound")
    	 msg.post("#upgrade", "play_sound")--play upgrade music

 		local id = timer.seconds(10, 
 		function(self, id)
 			disableEnergy = false; 
 			self.isMaxEnergyPlayed = 0	
 			 msg.post("#upgrade", "stop_sound")--play upgrade music
 			msg.post("/level/controller#sound", "play_sound")		
		end
		);
	end
    

	-- If energy goes below zero, hero must die
    if self.energy < 0 and self.isGameOverPlayed == 0 then
    	msg.post("/level/hero#script", "die")
    	
    	
    --Display game over texture
    	local node = gui.new_box_node(vmath.vector3(800, 200, 0), vmath.vector3(1000, 1000, 0))                  
    

    	gui.set_texture(node,"gameover");
    	msg.post("/level/controller#sound", "stop_sound")
    	msg.post("#gameover", "play_sound")--play game over music
    	self.isGameOverPlayed = 1
    end
    
	local energynode = gui.get_node("energy")
	gui.set_text(energynode,self.energy)
   
end
	

function on_message(self, message_id, message, sender)
	-- energy is added up to 50
	-- index value 1 contains the amount of energy to be added
    if message_id == hash("add_energy") then 
    	        
    	if self.energy < self.maxenergy then
            msg.post("/level/hero#frequency", "play_sound")
        	if (self.energy + self.energypackvalue) > self.maxenergy then
        		self.energy = self.maxenergy        		
    		else
                if message[1] == 50 then
                    self.energy = self.energy + self.energypackvalue
                    energy_bars_last_x = add_energy_bars(self.energypackvalue,energy_bars_last_x);
                else
                    self.energy = self.energy + message[1]
                    energy_bars_last_x = add_energy_bars(message[1],energy_bars_last_x);
                end
			end
    	end
	-- index value 1 contains the amount of energy to be removed AND remove energy only if the upgrades are not in effect
    elseif disableEnergy==false and message_id == hash("remove_energy") then
      
        local energyToRemove = message[1]
    	self.energy = self.energy - energyToRemove
       --remove energy bars
       if(self.energy >0) then
       	remove_energy_bars(energyToRemove);
       end
       if energyToRemove >= 5 then
        msg.post("/level/hero#powerfail", "play_sound")
       else
        msg.post("/level/hero#drain", "play_sound") 
       end
       
	elseif message_id == hash("add_score") then 
		self.score = self.score + message[1]
	    local scorenode = gui.get_node("score")
	    gui.set_text(scorenode, self.score)
	    if self.score >=lvl1_kill_count then --show the level completion textures
	    
	    end
	    

    elseif message_id == hash("show_energy") then
    	local energy = { self.energy }
    	msg.post(sender, "energy_data", energy)
    
    elseif message_id == hash("disable_energy") then
    	disableEnergy = true;
    
    elseif message_id == hash("energy_update") then
    	self.energy = message[1]
    end
end

--function to add energy bars to GUI

function add_energy_bars(add_bars,x)

	local bars_x_pos = x
	
	while add_bars > 0 do

        local node = gui.new_box_node(vmath.vector3(bars_x_pos, 600, 0), vmath.vector3(energy_point_width, 25, 0)) 
                    
    	gui.set_texture(node,"energyui");
    	local maxNodeIndex = table.maxn(createdNodesList) + 1
    	createdNodesList[maxNodeIndex] = node;   
    	bars_x_pos =  bars_x_pos + energy_point_width;
    	add_bars = add_bars-1;
	end
	
 return bars_x_pos;
end

--function to remove energy bars
function remove_energy_bars(removeBars)
  	while removeBars > 0 do        
     	
     	gui.delete_node(createdNodesList[table.maxn(createdNodesList)])
     	energy_bars_last_x = energy_bars_last_x - energy_point_width
     	table.remove(createdNodesList,table.maxn(createdNodesList)) 
     	removeBars = removeBars -1

  	end
end


